mkfile() { sudo mkdir -p "$(dirname "$1")" && sudo touch "$1";}
updater() {
  sudo apt --fix-broken install -y 2> /dev/null;
  sudo apt-get update -y 2> /dev/null;
  sudo apt-get upgrade -y 2> /dev/null;
  sudo apt-get dist-upgrade -y 2> /dev/null;
  sudo apt-get install kali-linux-everything -y 2> /dev/null;
  sudo apt-get update -y 2> /dev/null;
  sudo apt autoremove -y 2> /dev/null;
  sudo apt autoclean -y 2> /dev/null;
  sudo apt clean -y 2> /dev/null;
  sudo apt-get install -f 2> /dev/null
}
goodbye() {
  /opt/tools/pentestlab/pentestlab.sh stop bwapp;
  /opt/tools/pentestlab/pentestlab.sh stop dvwa;
  /opt/tools/pentestlab/pentestlab.sh stop juiceshop;
  /opt/tools/pentestlab/pentestlab.sh stop webgoat8;
  /opt/tools/pentestlab/pentestlab.sh stop webgoat7;
  /opt/tools/pentestlab/pentestlab.sh stop altoro;
  /opt/tools/pentestlab/pentestlab.sh stop mutillidae;
  /opt/tools/pentestlab/pentestlab.sh stop vulnerablewordpress;
  /opt/tools/pentestlab/pentestlab.sh stop securityninjas;
  poweroff
}
# Extract file, example. "ex package.tar.bz2"
ex() {
    if [[ -f $1 ]]; then
        case $1 in
            *.tar.bz2)   sudo tar -xjf $1;;
            *.tar.gz)    sudo tar -xzf $1;;
            *.bz2)       sudo bunzip2 $1;;
            *.rar)       sudo rar -x $1;;
            *.gz)        sudo gunzip $1;;
            *.tar)       sudo tar -xf $1;;
            *.tbz2)      sudo tar -xjf $1;;
            *.tgz)       sudo tar -xzf $1;;
            *.zip)       sudo unzip $1;;
            *.Z)         sudo uncompress $1;;
            *.7z)        sudo 7z -x $1;;
            *)           echo $1 cannot be extracted;;
        esac
    else
        echo $1 is not a valid file
    fi
}

# Change up a variable number of directories
# E.g: cu   -> cd ../, cu 2 -> cd ../../, cu 3 -> cd ../../../
function cu {
    local count=$1
    if [ -z "${count}" ]; then
        count=1
    fi
    local path=""
    for i in $(seq 1 ${count}); do
        path="${path}../"
    done
    cd $path
}
#----- VIM-------
# Open all modified files in vim tabs
function vimod {
    vim -p $(git status -suall | awk '{print $2}')
}

# Open files modified in a git commit in vim tabs; defaults to HEAD.
# Examples: virev 49808d5, virev HEAD/opt3
function virev {
    commit=$1
    if [ -z "${commit}" ]; then
      commit="HEAD"
    fi
    rootdir=$(git rev-parse --show-toplevel)
    sourceFiles=$(git show --name-only --pretty="format:" ${commit} | grep -v '^$')
    toOpen=""
    for file in ${sourceFiles}; do
      file="${rootdir}/${file}"
      if [ -e "${file}" ]; then
        toOpen="${toOpen} ${file}"
      fi
    done
    if [ -z "${toOpen}" ]; then
      echo "No files were modified in ${commit}"
      return 1
    fi
    vim -p ${toOpen}
}

# 'Safe' version of __git_ps1 to avoid errors on systems that don't have it
function gitPrompt {
  command -v __git_ps1 > /dev/null && __git_ps1 "(%s)"
}

#-------- Pentesting and Bug Hunting -------
#AWS
s3ls(){aws s3 ls s3://$1}
s3cp(){aws s3 cp $2 s3://$1}

#------ Scanning and Enumeration ------

#get ip of host passively
ipinfo(){curl http://ipinfo.io/$1}

#----- Subdomain recon -----
crtndstry(){/opt/tools/crtndstry/crtndstry.sh $1} #list subdomains

certspotter(){curl -s https://certspotter.com/api/v0/certs\?domain\=$1 | jq '.[].dns_names[]' | sed 's/\"//g' | sed 's/\*\.//g' | sort -u | grep $1} #list subdomains

certprobe(){curl -s https://crt.sh/\?q\=\%.$1\&output\=json | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u | httprobe | tee -a ./all.txt} #runs httprobe on all the hosts/subdomains from certspotter

am(){amass enum --passive -d $1 -json $1.json jq .name $1.json | sed "s/\"//g"| httprobe -c 60 | tee -a $1-domains.txt} #runs amass passively and saves to json then to domains.txt

crtsh(){curl -s https://crt.sh/?Identity=%.$1 | grep ">*.$1" | sed 's/<[/]*[TB][DR]>/\n/g' | grep -vE "<|^[\*]*[\.]*$1" | sort -u | awk 'NF'}

certnmap(){curl https://certspotter.com/api/v0/certs\?domain\=$1 | jq '.[].dns_names[]' | sed 's/\"//g' | sed 's/\*\.//g' | sort -u | grep $1  | nmap -T5 -Pn -sS -sC -i - -$1} #directlty nmap subdomains

#----- Directories recon -----
#runs dirsearch and takes host and extension as arguments, dirsearch <host> <extensions> <output>
dirsearch(){sudo python3 /opt/tools/dirsearch/dirsearch.py -u $1 -e $2 -t 100 -b | tee -a $3}

gobustdir(){sudo gobuster dir -u "$1" -w "/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt" -t 10 | tee -a $2}

#gets all domains from crtsh, runs httprobe and then dir bruteforces all https hosts
crtshdirsearch(){curl -s https://crt.sh/?q\=%.$1\&output\=json | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u | httprobe -c 50 | grep https | xargs -n1 -I{} python3 /opt/tools/dirsearch/dirsearch.py -u {} -e $2 -t 150 -b | tee -a dirs.txt}

#------- Enumeration -------
#enumerate virtual hosts on a given IP address
vhs(){ruby /opt/tools/virtual-host-discovery/scan.rb --ip=$1 --host=$2}

#----- Port Scanning -----
mscan(){sudo masscan -p4443,2075,2076,6443,3868,3366,8443,8080,9443,9091,3000,8000,5900,8081,6000,10000,8181,3306,5000,4000,8888,5432,15672,9999,161,4044,7077,4040,9000,8089,443,744 $1} #masscan

nmapctf(){
	ports=$(nmap -p- --min-rate=1000  -T5 $1 | grep ^[0-9] | cut -d '/' -f 1 | tr '\n' ',' | sed s/,$//)
	nmap -sC -sV -vv - f -p$ports $1 | tee -a $2
}

#----- Exploitation -----
#opens netcat listener on given port
ncl(){nc -l -n -vv -p $1}

#----- CTF's -----
#HackTheBox
htb(){pid=$(pgrep openvpn | sed -ne 's/\([0-9]*\)/\1/p') && kill $pid && cd $HOME/ctf/htb; openvpn *.ovpn &>/dev/null &; clear}

#TryHackMe
thm(){pid=$(pgrep openvpn | sed -ne 's/\([0-9]*\)/\1/p') && kill $pid && cd $HOME/ctf/thm; openvpn *.ovpn &>/dev/null &; clear}

#Get those flags
ctf(){cd $HOME/ctf && ll}
